{"ast":null,"code":"/* eslint-disable prefer-rest-params */\nimport getTheme from './get-theme';\n\n// Unpack custom variants, and get correct value for the current theme\nfunction themedVariants(variantProp, variants) {\n  return function (props) {\n    var theme = getTheme(props);\n    if (props && props[variantProp] && variants) {\n      var modes = variants[props[variantProp]];\n      if (modes && modes[theme.mode]) {\n        var value = modes[theme.mode];\n        if (value) {\n          return value;\n        } // TS believes value can be undefined\n      }\n    }\n\n    return '';\n  };\n}\nexport default function themed(modesOrVariant, variantModes) {\n  if (typeof modesOrVariant === 'string') {\n    return themedVariants(modesOrVariant, variantModes);\n  }\n  var modes = modesOrVariant;\n  return function (props) {\n    // Get theme from the user's props\n    var theme = getTheme(props); // User isn't required to provide both light and dark values\n\n    if (theme.mode in modes) {\n      var value = modes[theme.mode]; // TS believes value can be undefined\n\n      if (value) {\n        return value;\n      }\n    }\n    return '';\n  };\n}","map":{"version":3,"names":["getTheme","themedVariants","variantProp","variants","props","theme","modes","mode","value","themed","modesOrVariant","variantModes"],"sources":["C:/Users/Asus/Dropbox/Code/reactjs/node_modules/@atlaskit/theme/dist/esm/utils/themed.js"],"sourcesContent":["/* eslint-disable prefer-rest-params */\nimport getTheme from './get-theme';\n\n// Unpack custom variants, and get correct value for the current theme\nfunction themedVariants(variantProp, variants) {\n  return function (props) {\n    var theme = getTheme(props);\n\n    if (props && props[variantProp] && variants) {\n      var modes = variants[props[variantProp]];\n\n      if (modes && modes[theme.mode]) {\n        var value = modes[theme.mode];\n\n        if (value) {\n          return value;\n        } // TS believes value can be undefined\n\n      }\n    }\n\n    return '';\n  };\n}\n\nexport default function themed(modesOrVariant, variantModes) {\n  if (typeof modesOrVariant === 'string') {\n    return themedVariants(modesOrVariant, variantModes);\n  }\n\n  var modes = modesOrVariant;\n  return function (props) {\n    // Get theme from the user's props\n    var theme = getTheme(props); // User isn't required to provide both light and dark values\n\n    if (theme.mode in modes) {\n      var value = modes[theme.mode]; // TS believes value can be undefined\n\n      if (value) {\n        return value;\n      }\n    }\n\n    return '';\n  };\n}"],"mappings":"AAAA;AACA,OAAOA,QAAQ,MAAM,aAAa;;AAElC;AACA,SAASC,cAAc,CAACC,WAAW,EAAEC,QAAQ,EAAE;EAC7C,OAAO,UAAUC,KAAK,EAAE;IACtB,IAAIC,KAAK,GAAGL,QAAQ,CAACI,KAAK,CAAC;IAE3B,IAAIA,KAAK,IAAIA,KAAK,CAACF,WAAW,CAAC,IAAIC,QAAQ,EAAE;MAC3C,IAAIG,KAAK,GAAGH,QAAQ,CAACC,KAAK,CAACF,WAAW,CAAC,CAAC;MAExC,IAAII,KAAK,IAAIA,KAAK,CAACD,KAAK,CAACE,IAAI,CAAC,EAAE;QAC9B,IAAIC,KAAK,GAAGF,KAAK,CAACD,KAAK,CAACE,IAAI,CAAC;QAE7B,IAAIC,KAAK,EAAE;UACT,OAAOA,KAAK;QACd,CAAC,CAAC;MAEJ;IACF;;IAEA,OAAO,EAAE;EACX,CAAC;AACH;AAEA,eAAe,SAASC,MAAM,CAACC,cAAc,EAAEC,YAAY,EAAE;EAC3D,IAAI,OAAOD,cAAc,KAAK,QAAQ,EAAE;IACtC,OAAOT,cAAc,CAACS,cAAc,EAAEC,YAAY,CAAC;EACrD;EAEA,IAAIL,KAAK,GAAGI,cAAc;EAC1B,OAAO,UAAUN,KAAK,EAAE;IACtB;IACA,IAAIC,KAAK,GAAGL,QAAQ,CAACI,KAAK,CAAC,CAAC,CAAC;;IAE7B,IAAIC,KAAK,CAACE,IAAI,IAAID,KAAK,EAAE;MACvB,IAAIE,KAAK,GAAGF,KAAK,CAACD,KAAK,CAACE,IAAI,CAAC,CAAC,CAAC;;MAE/B,IAAIC,KAAK,EAAE;QACT,OAAOA,KAAK;MACd;IACF;IAEA,OAAO,EAAE;EACX,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}