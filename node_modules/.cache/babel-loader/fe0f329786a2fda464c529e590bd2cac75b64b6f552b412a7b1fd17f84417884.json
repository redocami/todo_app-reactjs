{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nimport { useCallback } from 'react';\nimport { useAnalyticsEvents } from './useAnalyticsEvents';\nimport { useTrackedRef } from './useTrackedRef';\n// WARNING: This hook will only function correctly for leaf node components - as in\n// no children inside the component will require analytics themselves.\n// Ignoring this warning will mean the analytics context of child components will not\n// include the context of this component, .e.g, lost data.\n// If you are going to have child components that require analytics use withAnalytics\n// or AnalyticsContext component instead.\nexport function usePlatformLeafEventHandler(_ref) {\n  var fn = _ref.fn,\n    action = _ref.action,\n    componentName = _ref.componentName,\n    actionSubject = _ref.actionSubject,\n    packageName = _ref.packageName,\n    packageVersion = _ref.packageVersion,\n    analyticsData = _ref.analyticsData;\n  var _useAnalyticsEvents = useAnalyticsEvents(),\n    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent; // We put analyticsData and fn in a ref so that we don't need to break\n  // memoization.\n  // Generally these could be defined by consumers inline\n  // and so we do this to avoid breaking memoization of useCallback\n\n  var dataRef = useTrackedRef(analyticsData);\n  var fnRef = useTrackedRef(fn);\n  var handler = useCallback(function (value) {\n    var analyticsEvent = createAnalyticsEvent({\n      action: action,\n      actionSubject: actionSubject || componentName,\n      attributes: {\n        componentName: componentName,\n        packageName: packageName,\n        packageVersion: packageVersion\n      }\n    }); // To avoid wrapping this component in AnalyticsContext we manually\n    // push the parent context's meta data into the context.\n    // Note: this new 'context'\n\n    var context = _objectSpread({\n      componentName: componentName,\n      packageName: packageName,\n      packageVersion: packageVersion\n    }, dataRef.current);\n    analyticsEvent.context.push(context); // fire an event on the atlaskit channel\n\n    var clone = analyticsEvent.clone();\n    if (clone) {\n      clone.fire('atlaskit');\n    }\n    fnRef.current(value, analyticsEvent);\n  }, [\n  // These are strings and won't change\n  action, componentName, actionSubject, packageName, packageVersion,\n  // This function is memoized in the context\n  createAnalyticsEvent,\n  // these are a stable ref because of the useTrackedRef hook\n  dataRef, fnRef]);\n  return handler;\n}","map":{"version":3,"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","useCallback","useAnalyticsEvents","useTrackedRef","usePlatformLeafEventHandler","_ref","fn","action","componentName","actionSubject","packageName","packageVersion","analyticsData","_useAnalyticsEvents","createAnalyticsEvent","dataRef","fnRef","handler","value","analyticsEvent","attributes","context","current","clone","fire"],"sources":["C:/Users/Asus/Dropbox/Code/reactjs/node_modules/@atlaskit/analytics-next/dist/esm/hooks/usePlatformLeafEventHandler.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useCallback } from 'react';\nimport { useAnalyticsEvents } from './useAnalyticsEvents';\nimport { useTrackedRef } from './useTrackedRef';\n// WARNING: This hook will only function correctly for leaf node components - as in\n// no children inside the component will require analytics themselves.\n// Ignoring this warning will mean the analytics context of child components will not\n// include the context of this component, .e.g, lost data.\n// If you are going to have child components that require analytics use withAnalytics\n// or AnalyticsContext component instead.\nexport function usePlatformLeafEventHandler(_ref) {\n  var fn = _ref.fn,\n      action = _ref.action,\n      componentName = _ref.componentName,\n      actionSubject = _ref.actionSubject,\n      packageName = _ref.packageName,\n      packageVersion = _ref.packageVersion,\n      analyticsData = _ref.analyticsData;\n\n  var _useAnalyticsEvents = useAnalyticsEvents(),\n      createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent; // We put analyticsData and fn in a ref so that we don't need to break\n  // memoization.\n  // Generally these could be defined by consumers inline\n  // and so we do this to avoid breaking memoization of useCallback\n\n\n  var dataRef = useTrackedRef(analyticsData);\n  var fnRef = useTrackedRef(fn);\n  var handler = useCallback(function (value) {\n    var analyticsEvent = createAnalyticsEvent({\n      action: action,\n      actionSubject: actionSubject || componentName,\n      attributes: {\n        componentName: componentName,\n        packageName: packageName,\n        packageVersion: packageVersion\n      }\n    }); // To avoid wrapping this component in AnalyticsContext we manually\n    // push the parent context's meta data into the context.\n    // Note: this new 'context'\n\n    var context = _objectSpread({\n      componentName: componentName,\n      packageName: packageName,\n      packageVersion: packageVersion\n    }, dataRef.current);\n\n    analyticsEvent.context.push(context); // fire an event on the atlaskit channel\n\n    var clone = analyticsEvent.clone();\n\n    if (clone) {\n      clone.fire('atlaskit');\n    }\n\n    fnRef.current(value, analyticsEvent);\n  }, [// These are strings and won't change\n  action, componentName, actionSubject, packageName, packageVersion, // This function is memoized in the context\n  createAnalyticsEvent, // these are a stable ref because of the useTrackedRef hook\n  dataRef, fnRef]);\n  return handler;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}